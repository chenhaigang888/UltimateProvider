{"message":"","data":[{"type":"1","id":"1346651295371042816","factor":"10","feedExts":[{"contentId":"1346651295371042816","content":{"secends":2978,"userId":"1346643708860997632","allowShare":true,"source":[{"width":2201,"sourceType":1,"height":3112,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/06\/10\/F8C0C099-667F-4A25-8F58-A4D0A5C7E4FA.JPG","duration":0},{"width":2186,"sourceType":1,"height":3010,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/06\/10\/A5EB5924-3FC1-4473-8DF3-168BAAA83CAF.JPG","duration":0}],"systemStatus":true,"scopeType":1,"publishSecends":2978,"type":2,"systemCreateTime":"2021-01-06 10:54:23","browses":92,"favours":11,"contentId":"1346651295371042816","comments":4,"checkStatus":1,"imageShowType":2,"allowComment":true,"forwards":0,"saveNative":false,"allowDownload":true,"content":"没有办法扼制生活的唐突   所向披靡就还能有点底气"},"exts":"最新内容:推荐","hasCollect":false,"hasDislike":false,"hasLike":false,"coins":0,"integral":36,"likes":[{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/11\/04\/09\/26cc4afdd7e24e1191e5abc2b08ca126-0.jpg","userId":"1323792878772367360"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2021\/01\/05\/14\/d37c0a8752f246cc841aaa71b3f4cf6b-0.jpg","userId":"1346276163763085312"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/08\/10\/13\/6162d530d54548e98fdd8708711fdeee-0.jpg","userId":"1254337921025183744"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/12\/28\/10\/dde9221eebe8f226217b55ea2a9d157116091216232725090.jpg","userId":"1343361853339832320"}],"user":{"status":2,"sex":2,"exts":"来自系统推荐！","avatar":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/06\/10\/AD82A6DF-5CF0-4C89-964E-004F2AE741F5.jpg","userId":"1346643708860997632","dId":"932344","finalShowName":"王贝","nickName":"w","relation":{"hasSelf":false,"hasMyFan":false,"hasMyFocus":false,"hasRelation":false,"hasFriend":false,"reqUserId":"1346643708860997632","hasMyStranger":false},"userEduItem":{"userId":"1346643708860997632","major":"音乐表演","schoolAddress":"河南","code":"18252","eduStartDate":"2020-01-01 00:00:00","college":"音乐学院","schoolName":"平顶山学院","eduLevelType":5,"userEduItemId":"1346643949140090880"},"name":"王贝","finalShowTags":["平顶山学院","音乐表演"]}}],"item":"2"},{"type":"1","id":"1346638718392053760","factor":"10","feedExts":[{"contentId":"1346638718392053760","content":{"content":"<p>我们生活在一个极其广袤却又五彩缤纷的宇宙中，这个宇宙已经有了上百亿年历史，但是对于人类来说，这个极其广大包含着无数星系的宇宙是如何形成的？这是一个难以重现的问题。而宇宙中闪烁的恒星又是怎样形成的？最近，日本科学家的一项观测或许将帮助我们理解这个谜团！<\/p><p>日本研究团队利用天文望远镜观测著名的猎户星云，幸运的观测到了一颗正在出生的婴儿恒星，它被命名为Orion KL Source 1。<\/p><p><img src=\"https:\/\/cdn3.dnaerapp.com\/2021\/1\/6\/10\/594596a7458b74226a4439b81bb59c2c160989856038671609.png\"><\/p><p>恒星是在星际空间中漂浮的大量气体灰尘羽状物中诞生的，比如我们的太阳，也是在一片气体云中形成的。但是天文学家迄今未能完全理解，太空中的气体和尘埃如何形成这样的超大质量恒星。<\/p><p><br><\/p><p>这个被观测到的正在出生的婴儿恒星，研究人员更是首次倾听到了它的“出生啼哭”：这颗恒星被一个气体灰尘盘环绕，并从这个气体灰尘盘中向外喷射出一股巨大的旋转气体流。<\/p><p><img src=\"https:\/\/cdn3.dnaerapp.com\/2021\/1\/6\/10\/77475f3cf609622ffc50d6dbfdc3954a160989859411857520.png\"><\/p><p><br><\/p><p>这可是人类宇宙观测史上首次观测到一颗正在诞生的恒星，这项观测对于宇宙探索无疑是重大发现：这有利于人类了解恒星形成的过程。在观测中，研究人员发现，在这颗年幼的恒星逐渐成熟时，恒星出现的气体流将帮助减缓了恒星的旋转速度，在这个过程中，恒星得以在巨大气体灰尘云中孕育而成。<\/p><p><img src=\"https:\/\/cdn3.dnaerapp.com\/2021\/1\/6\/10\/8b856f05a485852a43d86de0b5e08dd2160989861436639303.png\"><\/p><p>由于这颗婴儿恒星位于邻近地球的猎户星云，距离地球越1400光年，通过更高级的天文望远镜提供的观测能力，研究人员进一步观测这个刚出生的“小太阳”的变化情况。这次观测能够很好地解释恒星流出物的旋转状况，从而更能帮助天文学家理解恒星的形成机制。<\/p>","secends":5976,"allowShare":true,"source":[{"sourceType":1,"height":468,"url":"https:\/\/cdn3.dnaerapp.com\/2021\/1\/6\/10\/594596a7458b74226a4439b81bb59c2c160989853743387766.png","width":498}],"title":"日本专家又发现宇宙的惊人秘密：他们拍到了刚出生时的“太阳”！","systemStatus":true,"tags":["[]"],"userId":"1342296453252296704","scopeType":1,"visibleUserId":[],"cover":"","publishSecends":5976,"type":5,"articleShowType":4,"systemCreateTime":"2021-01-06 10:04:24","browses":178,"favours":11,"contentId":"1346638718392053760","comments":0,"checkStatus":1,"imageShowType":2,"allowComment":true,"cityName":"","forwards":0,"address":"","allowDownload":true},"exts":"最新内容:推荐","hasCollect":false,"hasDislike":false,"hasLike":false,"coins":0,"integral":28,"likes":[{"avatar":"https:\/\/cdn2.dnaerapp.com\/2020\/08\/20\/17\/2C3A3166-62A3-4256-A462-10D9EED0752E.jpg","userId":"1286861209846513664"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/8\/5\/15\/89628531a6f4a3c087ac32d9d127f80c159661334587238782.jpg","userId":"1290908920719282176"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/08\/31\/11\/b0f7ce41b0434b76a3b98386dc7c07de-0.jpg","userId":"1224187848840843264"},{"avatar":"https:\/\/cdn2.dnaerapp.com\/2020\/08\/07\/16\/5A12117F-9F91-4095-9390-53F109002ED0.jpg","userId":"1291646350032474112"}],"user":{"status":2,"userLabels":[],"sex":1,"exts":"探寻世间和宇宙万物的运行本质，追寻为什么宇宙存在、你我存在.","userType":2,"hobbies":["冷知识","摄影"],"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/12\/25\/10\/0bb83e3f73f4aec388dcadd44986f01f160886347097477179.jpg","userId":"1342296453252296704","dId":"587172","finalShowName":"宇宙的奥秘","nickName":"宇宙的奥秘","relation":{"hasSelf":false,"hasMyFan":false,"hasMyFocus":false,"hasRelation":false,"hasFriend":false,"reqUserId":"1342296453252296704","hasMyStranger":false},"userEduItem":{},"remarks":"探寻世间和宇宙万物的运行本质，追寻为什么宇宙存在、你我存在.","name":"李克","finalShowTags":["西安交大","英语"]}}],"item":"5"},{"type":"1","id":"1346637065603325952","factor":"10","feedExts":[{"contentId":"1346637065603325952","content":{"content":"<p><strong style=\"color: rgb(119, 48, 152);\">一、日志简介<\/strong><\/p><p><strong>1.1 日志是什么（WHAT）<\/strong><\/p><p><span style=\"background-color: rgb(244, 238, 255);\">日志：记录程序的运行轨迹，方便查找关键信息，也方便快速定位解决问题。<\/span><\/p><p>通常，Java程序员在开发项目时都是依赖Eclipse\/IDEA等集成开发工具的Debug 调试功能来跟踪解决Bug，但项目发布到了测试、生产环境怎么办？你有可能会说可以使用远程调试，但实际并不能允许让你这么做。<\/p><p>所以，日志的作用就是在测试、生产环境没有 Debug 调试工具时开发和测试人员定位问题的手段。日志打得好，就能根据日志的轨迹快速定位并解决线上问题，反之，日志输出不好，不仅无法辅助定位问题反而可能会影响到程序的运行性能和稳定性。<\/p><p>很多介绍 AOP 的地方都采用日志来作为介绍，实际上日志要采用切面的话是极其不科学的！对于日志来说，只是在方法开始、结束、异常时输出一些什么，那是绝对不够的，这样的日志对于日志分析没有任何意义。如果在方法的开始和结束整个日志，那方法中呢？如果方法中没有日志的话，那就完全失去了日志的意义！如果应用出现问题要查找由什么原因造成的，也没有什么作用。这样的日志还不如不用！<\/p><p><strong>1.2 日志有什么用（WHY）<\/strong><\/p><p>不管是使用何种编程语言，日志输出几乎无处不再。总结起来，日志大致有以下几种用途：<\/p><ul><li><strong style=\"color: rgb(145, 109, 213);\">「问题追踪」<\/strong>：辅助排查和定位线上问题，优化程序运行性能。<\/li><li><strong style=\"color: rgb(145, 109, 213);\">「状态监控」<\/strong>：通过日志分析，可以监控系统的运行状态。<\/li><li><strong style=\"color: rgb(145, 109, 213);\">「安全审计」<\/strong>：审计主要体现在安全上，可以发现非授权的操作。<\/li><\/ul><p><strong>1.3 总结<\/strong><\/p><p>日志在应用程序中是非常非常重要的，好的日志信息能有助于我们在程序出现 BUG 时能快速进行定位，并能找出其中的原因。<\/p><p>作为一个有修养的程序猿，对日志这个东西应当引起足够的重视。<\/p><p><strong style=\"color: rgb(119, 48, 152);\">二、日志框架（HOW）<\/strong><\/p><p><strong>2.1 常用的日志框架<\/strong><\/p><p>log4j、Logging、commons-logging、slf4j、logback，开发的同学对这几个日志相关的技术不陌生吧，为什么有这么多日志技术，它们都是什么区别和联系呢？且看下文分解：<\/p><p class=\"ql-align-center\"><strong>2.1.1 Logging<\/strong><\/p><p>这是 Java 自带的日志工具类，在 JDK 1.5 开始就已经有了，在 java.util.logging 包下。通常情况下，这个基本没什么人用了，了解一下就行。<\/p><p class=\"ql-align-center\"><strong>2.1.2 commons-logging<\/strong><\/p><p>commons-logging 是日志的门面接口，它也是Apache 最早提供的日志门面接口，用户可以根据喜好选择不同的日志实现框架，而不必改动日志定义，这就是日志门面的好处，符合面对接口抽象编程。现在已经不太流行了，了解一下就行。<\/p><p class=\"ql-align-center\"><strong>2.1.3 Slf4j<\/strong><\/p><p>slf4j,英文全称为“Simple Logging Facade for Java”，为java提供的简单日志Facade。Facade门面，更底层一点说就是接口。它允许用户以自己的喜好，在工程中通过slf4j接入不同的日志系统。<\/p><p>因此slf4j入口就是众多接口的集合，它不负责具体的日志实现，只在编译时负责寻找合适的日志系统进行绑定。具体有哪些接口，全部都定义在slf4j-api中。查看slf4j-api源码就可以发现，里面除了public final class LoggerFactory类之外，都是接口定义。因此slf4j-api本质就是一个接口定义。<\/p><p class=\"ql-align-center\"><strong>2.1.4 Log4j<\/strong><\/p><p>Log4j 是 Apache 的一个开源日志框架，也是市场占有率最多的一个框架。<\/p><p>注意：log4j 在 2015.08.05 这一天被 Apache 宣布停止维护了，用户需要切换到 Log4j2上面去。<\/p><p>下面是官宣原文：<\/p><p><span style=\"background-color: rgb(244, 238, 255);\">On August 5, 2015 the Logging Services Project Management Committee announced that Log4j 1.x had reached end of life. For complete text of the announcement please see the Apache Blog. Users of Log4j 1 are recommended to upgrade to Apache Log4j 2.<\/span><\/p><p class=\"ql-align-center\"><strong>2.1.5 Log4j2<\/strong><\/p><p>Log4j 2 Apache Log4j 2是apache开发的一款Log4j的升级产品。<\/p><p>Log4j2与Log4j1发生了很大的变化，log4j2不兼容log4j1。<\/p><p class=\"ql-align-center\"><strong>2.1.6 Logback<\/strong><\/p><p>Logback 是 Slf4j 的原生实现框架，同样也是出自 Log4j 一个人之手，但拥有比 log4j 更多的优点、特性和更做强的性能，现在基本都用来代替 log4j 成为主流。<\/p><p>Logback相对于log4j拥有更快的执行速度。基于我们先前在log4j上的工作，logback 重写了内部的实现，在某些特定的场景上面，甚至可以比之前的速度快上10倍。在保证logback的组件更加快速的同时，同时所需的内存更加少。<\/p><p><strong>2.2 日志框架怎么选<\/strong><\/p><p>选项太多了的后果就是选择困难症，我的看法是没有最好的，只有最合适的：<\/p><ul><li>commons-loggin、slf4j 只是一种日志抽象门面，不是具体的日志框架。<\/li><\/ul><p>log4j、logback 是具体的日志实现框架。<\/p><ul><li>在比较关注性能的地方，选择Logback或自己实现高性能Logging API可能更合适。推荐：<strong style=\"color: rgb(145, 109, 213);\">slf4j + logback<\/strong>.<\/li><li>在已经使用了Log4j的项目中，如果没有发现问题，继续使用可能是更合适的方式：推荐组合为：<strong style=\"color: rgb(145, 109, 213);\">slf4j + log4j2<\/strong>.<\/li><li>如果不想有依赖则使用java.util.logging或框架容器已经提供的日志接口。<\/li><\/ul><p><strong style=\"color: rgb(119, 48, 152);\">三、记录日志的时机<\/strong><\/p><p>在看线上日志的时候，我们可曾陷入到日志泥潭？该出现的日志没有，无用的日志一大堆，或者需要的信息分散在各个角落，特别是遇到紧急的在线bug时，有效的日志被大量无意义的日志信息淹没，焦急且无奈地浪费大量精力查询日志。那什么是记录日志的合适时机呢？<\/p><p>总结几个需要写日志的点：<\/p><ul><li><strong style=\"color: rgb(145, 109, 213);\">「编程语言提示异常」<\/strong>：如今各类主流的编程语言都包括异常机制，业务相关的流行框架有完整的异常模块。这类捕获的异常是系统告知开发人员需要加以关注的，是质量非常高的报错。应当适当记录日志，根据实际结合业务的情况使用warn或者error级别。<\/li><li><strong style=\"color: rgb(145, 109, 213);\">「业务流程预期不符」<\/strong>：除开平台以及编程语言异常之外，项目代码中结果与期望不符时也是日志场景之一，简单来说所有流程分支都可以加入考虑。取决于开发人员判断能否容忍情形发生。常见的合适场景包括外部参数不正确，数据处理问题导致返回码不在合理范围内等等。<\/li><li><strong style=\"color: rgb(145, 109, 213);\">「系统核心角色，组件关键动作」<\/strong>：系统中核心角色触发的业务动作是需要多加关注的，是衡量系统正常运行的重要指标，建议记录INFO级别日志，比如电商系统用户从登录到下单的整个流程；微服务各服务节点交互；核心数据表增删改；核心组件运行等等，如果日志频度高或者打印量特别大，可以提炼关键点INFO记录，其余酌情考虑DEBUG级别。<\/li><li><strong style=\"color: rgb(145, 109, 213);\">「系统初始化」<\/strong>：系统或者服务的启动参数。核心模块或者组件初始化过程中往往依赖一些关键配置，根据参数不同会提供不一样的服务。务必在这里记录INFO日志，打印出参数以及启动完成态服务表述。<\/li><\/ul><p><strong style=\"color: rgb(119, 48, 152);\">四、日志打印最佳实践<\/strong><\/p><p><strong>4.1 日志变量定义<\/strong><\/p><p>日志变量往往不变，最好定义成final static，变量名用大写。<\/p><p><br><\/p><p>                private&nbsp;static&nbsp;final&nbsp;Logger&nbsp;log&nbsp;=&nbsp;LoggerFactory.getLogger({SimpleClassName}.getClass());<\/p><p>              <\/p><p>通常一个类只有一个 <strong style=\"color: rgb(145, 109, 213);\">log<\/strong> 对象，如果有父类可以将 <strong style=\"color: rgb(145, 109, 213);\">log<\/strong> 定义在父类中。<\/p><p>日志变量类型定义为门面接口（如 slf4j 的 Logger），实现类可以是 Log4j、Logback 等日志实现框架，不要把实现类定义为变量类型，否则日志切换不方便，也不符合抽象编程思想。<\/p><p>另外，推荐引入lombok的依赖，在类的头部加上<strong style=\"color: rgb(145, 109, 213);\">@Slf4j<\/strong>的注解，之后便可以在程序的任意位置使用<strong style=\"color: rgb(145, 109, 213);\">log<\/strong>变量打印日志信息了，使用起来更加简洁一点，在重构代码尤其是修改类名的时候无需改动原有代码。<\/p><p><strong>4.2 参数占位格式<\/strong><\/p><p>使用参数化形式{}占位，[]进行参数隔离<\/p><p><br><\/p><p>                log.debug(\"Save order with order no：[{}], and order amount：[{}]\");<\/p><p>log.debug(\"Save order with order no：[{}], and order amount：[{}]\");<\/p><p>              <\/p><p>这种可读性好，这样一看就知道[]里面是输出的动态参数，{}用来占位类似绑定变量，而且只有真正准备打印的时候才会处理参数，方便定位问题。<\/p><p>如果日志框架不支持参数化形式，且日志输出时不支持该日志级别时会导致对象冗余创建，浪费内存，此时就需要使用 isXXEnabled 判断，如：<\/p><p><br><\/p><p>                if(log.isDebugEnabled()){<\/p><p>&nbsp;&nbsp;&nbsp;&nbsp;\/&nbsp;如果日志不支持参数化形式，debug又没开启，那字符串拼接就是无用的代码拼接，影响系统性能<\/p><p>&nbsp;&nbsp;&nbsp;&nbsp;log.debug(\"Save order with order no：\"&nbsp;+&nbsp;orderNo&nbsp;+&nbsp;\", and order amount：\"&nbsp;+&nbsp;orderAmount);<\/p><p>}<\/p><p>              <\/p><p>至少 debug 级别是需要开启判断的，线上日志级别至少应该是 info 以上的。<\/p><p>这里推荐大家用 SLF4J 的门面接口，可以用参数化形式输出日志，debug 级别也不必用 if 判断，简化代码。<\/p><p><strong>4.3 日志的基本格式<\/strong><\/p><p>日志输出主要在文件中，应包括以下内容：<\/p><ul><li>日志时间<\/li><li>日志级别主要使用<\/li><li>调用链标识（可选）<\/li><li>线程名称<\/li><li>日志记录器名称<\/li><li>日志内容<\/li><li>异常堆栈（不一定有）<\/li><\/ul><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">11:44:44.827&nbsp;WARN&nbsp;[93ef3E0120160803114444]&nbsp;[main]&nbsp;[ClassPathXmlApplicationContext]&nbsp;Exception&nbsp;encountered&nbsp;during&nbsp;context&nbsp;initialization&nbsp;-&nbsp;cancelling&nbsp;refresh&nbsp;attempt<\/span><\/p><p class=\"ql-align-center\"><strong>4.3.1 日志时间<\/strong><\/p><p>作为日志产生的日期和时间，这个数据非常重要，一般精确到毫秒。由于线上一般配置为按天滚动日志文件，日期标识在文件名上，所以可以不放在这个时间中，使用 <strong style=\"color: rgb(145, 109, 213);\">HH:mm:ss.SSS<\/strong> 格式即可。非要加上也未尝不可，格式推荐：<strong style=\"color: rgb(145, 109, 213);\">yyyy-MM-dd HH:mm:ss.SSS<\/strong>。<\/p><p class=\"ql-align-center\"><strong>4.3.2 日志级别<\/strong><\/p><p><span style=\"background-color: rgb(244, 238, 255);\">日志的输出都是分级别的，不同的设置不同的场合打印不同的日志。下面拿最普遍用的 Log4j 日志框架来做个日志级别的说明，这个也比较齐全，其他的日志框架也都大同小异。<\/span><\/p><p>主要使用如下的四个级别：<\/p><ul><li>DEBUG：DEUBG 级别的主要输出调试性质的内容，该级别日志主要用于在开发、测试阶段输出。该级别的日志应尽可能地详尽，开发人员可以将各类详细信息记录到DEBUG里，起到调试的作用，包括参数信息，调试细节信息，返回值信息等等，便于在开发、测试阶段出现问题或者异常时，对其进行分析。<\/li><li>INFO：INFO日志主要记录系统关键信息，旨在保留系统正常工作期间关键运行指标，开发人员可以将初始化系统配置、业务状态变化信息，或者用户业务流程中的核心处理记录到INFO日志中，方便日常运维工作以及错误回溯时上下文场景复现。建议在项目完成后，在测试环境将日志级别调成 INFO，然后通过 INFO 级别的信息看看是否能了解这个应用的运用情况，如果出现问题后是否这些日志能否提供有用的排查问题的信息。<\/li><li>WARN：WARN 级别的主要输出警告性质的内容，这些内容是可以预知且是有规划的，比如，某个方法入参为空或者该参数的值不满足运行该方法的条件时。在 WARN 级别的时应输出较为详尽的信息，以便于事后对日志进行分析<\/li><li>ERROR：ERROR 级别主要针对于一些不可预知的信息，诸如：错误、异常等，比如，在 catch 块中抓获的网络通信、数据库连接等异常，若异常对系统的整个流程影响不大，可以使用 WARN 级别日志输出。在输出 ERROR 级别的日志时，尽量多地输出方法入参数、方法执行过程中产生的对象等数据，在带有错误、异常对象的数据时，需要将该对象一并输出<\/li><\/ul><p><strong>4.3.2.1 INFO和DEBUG的选择<\/strong><\/p><p>DEBUG级别比INFO低，包含调试时更详细的了解系统运行状态的东西，比如变量的值等等，都可以输出到DEBUG日志里。INFO是在线日志默认的输出级别，反馈系统的当前状态给最终用户看的。输出的信息，应该对最终用户具有实际意义的。从功能角度上说，Info输出的信息可以看作是软件产品的一部分，所以需要谨慎对待，不可随便输出。尝试记录INFO日志时不妨在头脑中模拟线上运行，如果这条日志会被频繁打印或者大部分时间对于纠错起不到作用，就应当考虑下调为DEBUG级别。<\/p><ul><li>由于info及debug日志打印量远大于ERROR，出于前文日志性能的考虑，如果代码为核心代码，执行频率非常高，务必推敲日志设计是否合理，是否需要下调为DEBUG级别日志。<\/li><li>注意日志的可读性，不妨在写完代码review这条日志是否通顺，能否提供真正有意义的信息。<\/li><li>日志输出是多线程公用的，如果有另外一个线程正在输出日志，上面的记录就会被打断，最终显示输出和预想的就会不一致。<\/li><\/ul><p><strong>4.3.2.2 WARN,ERROR的选择<\/strong><\/p><p>当方法或者功能处理过程中产生不符合预期结果或者有框架报错时可以考虑使用，常见问题处理方法包括：<\/p><ul><li>增加判断处理逻辑，尝试本地解决：增加逻辑判断吞掉报警永远是最优选择。<\/li><li>抛出异常，交给上层逻辑解决<\/li><li>记录日志，报警提醒<\/li><li>使用返回码包装错误做返回<\/li><\/ul><p>一般来说，WARN级别不会短信报警，ERROR级别则会短信报警甚至电话报警，ERROR级别的日志意味着系统中发生了非常严重的问题，必须有人马上处理，比如数据库不可用，系统的关键业务流程走不下去等等。错误的使用反而带来严重的后果，不区分问题的重要程度，只要有问题就error记录下来，其实这样是非常不负责任的，因为对于成熟的系统，都会有一套完整的报错机制，那这个错误信息什么时候需要发出来，很多都是依据单位时间内ERROR日志的数量来确定的。因此如果我们不分轻重缓急，一律ERROR对待，就会徒增报错的频率，久而久之，我们的救火队员对错误警报就不会那么在意，这个警报也就失去了原始的意义。<\/p><p>WARN代表可恢复的异常，此次失败不影响下次业务的执行，开发人员会苦恼某些场景下几次失败可容忍，频率高的时候需要提醒，记录ERROR的结果是线上时不时出现容忍范围内的报警，这时报警是无意义的。但反之不记录ERROR日志，真正出现问题则不会有实时报警，错过最佳处理时机。<\/p><p>强调ERROR报警<\/p><ul><li>ERROR级别的日志打印通常伴随报警通知。ERROR的报出应该伴随着业务功能受损，即上面提到的系统中发生了非常严重的问题，必须有人马上处理。<\/li><\/ul><p>ERROR日志目标<\/p><ul><li>给处理者直接准确的信息：error信息形成自身闭环。<\/li><\/ul><p>问题定位：<\/p><ul><li>发生了什么问题，哪些功能受到影响<\/li><li>获取帮助信息：直接帮助信息或帮助信息的存储位置<\/li><li>通过报警知道解决方案或者找何人解决<\/li><\/ul><p>日志模板<\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">log.error(“[接口名或操作名]&nbsp;[Some&nbsp;Error&nbsp;Msg]&nbsp;happens.&nbsp;[Probably&nbsp;Because].&nbsp;[Probably&nbsp;need&nbsp;to&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">do<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">]&nbsp;[params]&nbsp;.”);<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">log.error(“[接口名或操作名]&nbsp;[Some&nbsp;Error&nbsp;Msg]&nbsp;happens.&nbsp;[Probably&nbsp;Because].&nbsp;[please&nbsp;contact&nbsp;xxx@xxx]&nbsp;[params]&nbsp;.”);<\/span><\/p><p class=\"ql-align-center\"><strong>4.3.3 调用链标识<\/strong><\/p><p>在分布式应用中，用户的一个请求会调用若干个服务完成，这些服务可能还是嵌套调用的，因此完成一个请求的日志并不在一个应用的日志文件，而是分散在不同服务器上不同应用节点的日志文件中。该标识是为了串联一个请求在整个系统中的调用日志。<\/p><p>调用链标识格式：<\/p><ul><li>唯一字符串（trace ID）<\/li><li>调用层级（span ID）<\/li><\/ul><p>调用链标识作为可选项，无该数据时只输出 [] 即可。<\/p><p class=\"ql-align-center\"><strong>4.3.4 线程名称<\/strong><\/p><p>输出该日志的线程名称，一般在一个应用中一个同步请求由同一线程完成，输出线程名称可以在各个请求产生的日志中进行分类，便于分清当前请求上下文的日志。<\/p><p class=\"ql-align-center\"><strong>4.3.5 日志记录器名称<\/strong><\/p><p>日志记录器名称一般使用类名，日志文件中可以输出简单的类名即可，看实际情况是否需要使用包名和行号等信息。主要用于看到日志后到哪个类中去找这个日志输出，便于定位问题所在。<\/p><p class=\"ql-align-center\"><strong>4.3.6 日志内容<\/strong><\/p><ul><li>禁用 System.out.println和System.err.println<\/li><li>变参替换日志拼接<\/li><li>输出日志的对象，应在其类中实现快速的 toString 方法，以便于在日志输出时仅输出这个对象类名和 hashCode<\/li><li>预防空指针:不要在日志中调用对象的方法获取值，除非确保该对象肯定不为 null，否则很有可能会因为日志的问题而导致应用产生空指针异常。<\/li><\/ul><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">\/\/&nbsp;不推荐<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">log.debug(&nbsp;<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"Load&nbsp;student(id={}),&nbsp;name:&nbsp;{}\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;,&nbsp;id&nbsp;,&nbsp;student.getName()&nbsp;);<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">\/\/&nbsp;推荐<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">log.debug(&nbsp;<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"Load&nbsp;student(id={}),&nbsp;student:&nbsp;{}\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;,&nbsp;id&nbsp;,&nbsp;student&nbsp;);<\/span><\/p><p>对于一些一定需要进行拼接字符串，或者需要耗费时间、浪费内存才能产生的日志内容作为日志输出时，应使用 log.isXxxxxEnable() 进行判断后再进行拼接处理，比如：<\/p><p><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">if<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;(log.isDebugEnable())&nbsp;{<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;StringBuilder&nbsp;builder&nbsp;=&nbsp;new&nbsp;StringBuilder();<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">for<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;(Student&nbsp;student&nbsp;:&nbsp;students)&nbsp;{<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builder.append(<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"student:&nbsp;\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">).append(student);<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;builder.append(<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"value:&nbsp;\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">).append(JSON.toJSONString(object));<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;log.debug(&nbsp;<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"debug&nbsp;log&nbsp;example,&nbsp;detail:&nbsp;{}\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;,&nbsp;builder&nbsp;);<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">}<\/span><\/p><p class=\"ql-align-center\"><strong>4.3.7 异常堆栈<\/strong><\/p><p>异常堆栈一般会出现在 ERROR 或者 WARN 级别的日志中，异常堆栈含有方法调用链的系统，以及异常产生的根源。异常堆栈的日志属于上一行日志的，在日志收集时需要将其划至上一行中。<\/p><p><strong>4.4 日志文件<\/strong><\/p><p>日志文件放置于固定的目录中，按照一定的模板进行命名，推荐的日志文件名称：<\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">当前正在写入的日志文件名：&lt;应用名&gt;[-&lt;功能名&gt;].<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">log<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">已经滚入历史的日志文件名：&lt;应用名&gt;[-&lt;功能名&gt;].<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">log<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">.<\/span><\/p><p><strong>4.5 日志配置<\/strong><\/p><p>根据不同的环境配置不同的日志输出方式：<\/p><ul><li>本地调试可以将日志输出到控制台上<\/li><li>测试环境或者生产环境输出到文件中，每天产生一个文件，如果日志量庞大可以每个小时产生一个日志文件<\/li><li>生产环境中的文件输出，可以考虑使用异步文件输出，该种方式日志并不会马上刷新到文件中去，会产生日志延时，在停止应用时可能会导致一些还在内存中的日志未能及时刷新到文件中去而产生丢失，如果对于应用的要求并不是非常高的话，可暂不考虑异步日志<\/li><\/ul><p>logback 日志工具可以在日志文件滚动后将前一文件进行压缩，以减少磁盘空间占用，若使用 logback 对于日志量庞大的应用建议开启该功能。<\/p><p><strong>4.6 日志使用规范<\/strong><\/p><ol><li>在一个对象中通常只使用一个Logger对象，Logger应该是static final的，只有在少数需要在构造函数中传递logger的情况下才使用private final。<\/li><\/ol><p><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">private<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">static<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">final<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;Logger&nbsp;log&nbsp;=&nbsp;LoggerFactory.getLogger(Main.<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">class<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">);<\/span><\/p><ol><li>不要使用具体的日志实现类<\/li><\/ol><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">InterfaceImpl&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">interface<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;=&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">new<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;InterfaceImpl();<\/span><\/p><p>这段代码大家都看得懂吧？应该面向接口的对象编程，而不是面向实现，这也是软件设计模式的原则，正确的做法应该是。<\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">Interface&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">interface<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;=&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">new<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;InterfaceImpl();<\/span><\/p><p>日志框架里面也是如此，上面也说了，日志有门面接口，有具体实现的实现框架，所以大家不要面向实现编程。<\/p><ol><li><span style=\"color: rgb(1, 1, 1);\">输出Exceptions的全部Throwable信息。因为<\/span><strong style=\"color: rgb(145, 109, 213);\">log.error(msg)<\/strong><span style=\"color: rgb(1, 1, 1);\">和<\/span><strong style=\"color: rgb(145, 109, 213);\">log.error(msg,e.getMessage())<\/strong><span style=\"color: rgb(1, 1, 1);\">这样的日志输出方法会丢失掉最重要的StackTrace信息。<\/span><\/li><\/ol><p><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">void<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">foo<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">(){<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">try<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">{<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/do&nbsp;somehing&nbsp;<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">catch<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">(Exception&nbsp;e){<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.error(e.getMessage());<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/错误示范<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.erroe(<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"Bad&nbsp;Things\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">,e.getMessage());<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/错误示范<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.error(<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"Bad&nbsp;Things\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">,e);<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/正确演示<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">}<\/span><\/p><ol><li>不允许记录日志后又抛出异常。如捕获异常后又抛出了自定义业务异常，此时无需记录错误日志，由最终捕获方进行异常处理。不能又抛出异常，又打印错误日志，不然会造成重复输出日志。<\/li><\/ol><p><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">void<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">foo<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">()&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">throws<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;LogException{<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">try<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">{<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/do&nbsp;somehing&nbsp;<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">catch<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">(Exception&nbsp;e){<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.error(<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"Bad&nbsp;Things\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">,e);<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/正确<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">throw<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">new<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;LogException(<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"Bad&nbsp;Things\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">,e);<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">}<\/span><\/p><ol><li>不允许使用标准输出<\/li><\/ol><p>包括<strong style=\"color: rgb(145, 109, 213);\">System.out.println()<\/strong>和<strong style=\"color: rgb(145, 109, 213);\">System.error.println()<\/strong>语句。因为这个只会打印到控制台，而不会记录到日志文件中，不方便管理日志。此外，标准输出不会显示类名和行号信息，一旦代码中大量出现标准输出的代码，且日志中打印有标准输出的内容，很难定位日志内容和日志打印的位置，根本无法排查问题，想删除无用日志输出也改不动，这个是笔者在重构古董代码的时候亲自踩过的一个坑。<\/p><p><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">void<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">foo<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">(){<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">try<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">{<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/do&nbsp;somehing&nbsp;<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">catch<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">(Exception&nbsp;e){<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Syste.out.println(e.getMessage());<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/错误<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.error.println(e.getMessage());<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/错误<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.error(<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"Bad&nbsp;Things\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">,e);<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/正确<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">}<\/span><\/p><ol><li>不允许出现printStackTrace<\/li><\/ol><p><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">void<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">foo<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">(){<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">try<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">{<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/do&nbsp;somehing&nbsp;<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">catch<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">(Exception&nbsp;e){<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStacktrace();<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/错误<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.error(<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"Bad&nbsp;Things\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">,e);<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(117, 113, 94);\">\/\/正确<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">}<\/span><\/p><p>来看一下它的源码：<\/p><p><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">public<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">void<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">printStackTrace<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">()&nbsp;{<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;printStackTrace(System.err);<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">}<\/span><\/p><p>它其实也是利用 <strong style=\"color: rgb(145, 109, 213);\">System.err<\/strong> 输出到了Tomcat控制台。<\/p><ol><li>禁止在线上环境开启debug级别日志输出<\/li><\/ol><p>出于日志性能的考虑，如果代码为核心代码，执行频率非常高，则输出日志建议增加判断，尤其是低级别的输出。<\/p><p>一是因为项目本身 debug 日志太多，二是各种框架中也大量使用 debug 的日志，线上开启 debug 不久就会打满磁盘，影响业务系统的正常运行。<\/p><ol><li>不要在大循环中打印日志<\/li><\/ol><p>如果你的框架使用了性能不高的 Log4j 框架，那就不要在上千个 for 循环中打印日志，这样可能会拖垮你的应用程序，如果你的程序响应时间变慢，那要考虑是不是日志打印的过多了。<\/p><p><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">for<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">(<\/span><strong style=\"background-color: rgb(39, 40, 34); color: rgb(249, 38, 114);\">int<\/strong><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;i=0;&nbsp;i&lt;2000;&nbsp;i++){<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">&nbsp;&nbsp;&nbsp;&nbsp;log.info(<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(166, 226, 46);\">\"XX\"<\/span><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">);<\/span><\/p><p><span style=\"background-color: rgb(39, 40, 34); color: rgb(221, 221, 221);\">}<\/span><\/p><p>最好的办法是在循环中记录要点，在循环外面总结打印出来。<\/p><ol><li>打印有意义的日志<\/li><\/ol><p>通常情况下在程序日志里记录一些比较有意义的状态数据：程序启动，退出的时间点；程序运行消耗时间；耗时程序的执行进度；重要变量的状态变化。<\/p><p><br><\/p><p><br><\/p>","secends":6370,"allowShare":true,"source":[{"sourceType":1,"height":695,"url":"https:\/\/cdn3.dnaerapp.com\/2021\/1\/6\/9\/a0328148e4e051c7d348a4651c290a5516098982565315410.png","width":1237}],"title":"Java日志记录最佳实践","systemStatus":true,"tags":["[]"],"userId":"1295606479316959232","scopeType":1,"visibleUserId":[],"cover":"","publishSecends":6370,"type":5,"articleShowType":4,"systemCreateTime":"2021-01-06 09:57:50","browses":242,"favours":10,"contentId":"1346637065603325952","comments":0,"checkStatus":1,"imageShowType":2,"allowComment":true,"cityName":"","forwards":0,"address":"","allowDownload":true},"exts":"最新内容:推荐","hasCollect":false,"hasDislike":false,"hasLike":false,"coins":0,"integral":26,"likes":[{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/12\/28\/11\/b7437f34674e40ac858e34b93c8023b2-0.jpg","userId":"1343386905441677312"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/6\/5\/17\/ea4e59cfe1ffe2032daaafadb7e93769.jpg","userId":"1181021965155176448"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/08\/27\/17\/fbf7223cc2424d96aea5c84386508e4b-0.jpg","userId":"1286196344583077888"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/6\/12\/18\/bc3b7f5d53f04c8ec860e2052952dfe415919577235812220.jpg","userId":"1271387128007684096"}],"user":{"status":2,"userLabels":[],"sex":1,"exts":"Hello World！","userType":2,"hobbies":[],"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/8\/28\/18\/1abb2dc3d76311944ffdbe9980fbaadd159861071312577639.jpg","userId":"1295606479316959232","dId":"226000","finalShowName":"满头秀发","nickName":"满头秀发","relation":{"hasSelf":false,"hasMyFan":false,"hasMyFocus":false,"hasRelation":false,"hasFriend":false,"reqUserId":"1295606479316959232","hasMyStranger":false},"userEduItem":{"userId":"1295606479316959232","major":"","schoolAddress":"河南","code":"18782","eduStartDate":"2018-01-01 00:00:00","college":"","schoolName":"信阳学院","eduLevelType":5,"userEduItemId":"1295607674394619904"},"remarks":"Hello World！","name":"张一尘","finalShowTags":["信阳学院"]}}],"item":"5"},{"type":"1","id":"1346499732933894144","factor":"10","feedExts":[{"contentId":"1346499732933894144","content":{"secends":39113,"userId":"1335164205583233024","allowShare":true,"source":[{"width":1024,"sourceType":1,"height":1024,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/06\/00\/A49E9916-D937-4B9B-A3BE-3E95B8F3D80A.JPG","duration":0}],"systemStatus":true,"scopeType":1,"publishSecends":39113,"type":2,"systemCreateTime":"2021-01-06 00:52:07","browses":356,"favours":21,"contentId":"1346499732933894144","comments":5,"checkStatus":1,"imageShowType":2,"allowComment":true,"forwards":0,"saveNative":false,"allowDownload":true,"content":"做了一张壁纸"},"exts":"最新内容:推荐","hasCollect":false,"hasDislike":false,"hasLike":false,"coins":0,"integral":58,"likes":[{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/12\/21\/17\/88121b1ebcff422ba374b74ee679c61b-0.jpg","userId":"1340933300721029120"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/12\/29\/11\/2e315737613b4794aa3768b7252f94a5-0.jpg","userId":"1343752895713087488"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2021\/01\/05\/14\/d37c0a8752f246cc841aaa71b3f4cf6b-0.jpg","userId":"1346276163763085312"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2021\/1\/5\/15\/06f38ab972bdfea910450445f3b471fb160983000878176827.jpg","userId":"1346290072190337024"}],"user":{"status":2,"userLabels":[],"sex":1,"exts":"反正终会相见","avatar":"https:\/\/cdn2.dnaerapp.com\/2020\/12\/05\/18\/90ED8E97-0D07-4021-A4D3-CCF9312C2CE2.jpg","userId":"1335164205583233024","dId":"245489","finalShowName":"汪雍昊","nickName":"壺","relation":{"hasSelf":false,"hasMyFan":false,"hasMyFocus":false,"hasRelation":false,"hasFriend":false,"reqUserId":"1335164205583233024","hasMyStranger":false},"userEduItem":{"userId":"1335164205583233024","major":"动画","schoolAddress":"四川","code":"15715","eduStartDate":"2018-01-01 00:00:00","college":"","schoolName":"四川电影电视学院","eduLevelType":5,"userEduItemId":"1335164397630672896"},"remarks":"反正终会相见","name":"汪雍昊","finalShowTags":["四川电影电视学院","动画"]}}],"item":"2"},{"type":"1","id":"1346470800071483392","factor":"10","feedExts":[{"contentId":"1346470800071483392","content":{"secends":46011,"userId":"1115551084476239872","allowShare":true,"source":[{"width":1079,"sourceType":1,"height":1126,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/05\/22\/06D5E7F6-6474-470D-A737-41A35A11FBA4.JPG","duration":0}],"systemStatus":true,"scopeType":1,"publishSecends":46011,"type":2,"systemCreateTime":"2021-01-05 22:57:09","browses":2818,"favours":33,"contentId":"1346470800071483392","comments":5,"checkStatus":1,"imageShowType":2,"allowComment":true,"forwards":1,"saveNative":false,"allowDownload":true,"content":"Jack ma...消失两个月后出现在别人的动态里，从《赢在中国》第一次看到马云至现在，喜欢的方面总要多一些，尽管马云最近诸多不顺。\n不论是实体还是互联网，其实就是这样，经济就是在冲突与矛盾的过程中前进的。\n"},"exts":"最新内容:推荐","hasCollect":false,"hasDislike":false,"hasLike":false,"coins":0,"integral":86,"likes":[{"avatar":"https:\/\/cdn3.dnaerapp.com\/user\/wechart\/2020\/12\/21\/16\/pattern1337380900099792985.png","userId":"1340937133884448768"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2021\/1\/5\/14\/895cd88b02513fa5556c7a3d70d36b54160982842833155120.jpg","userId":"1346275938888491008"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2021\/01\/05\/14\/d37c0a8752f246cc841aaa71b3f4cf6b-0.jpg","userId":"1346276163763085312"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/12\/29\/11\/2e315737613b4794aa3768b7252f94a5-0.jpg","userId":"1343752895713087488"}],"user":{"finalShowName":"任小庆","nickName":"燕来秋","motions":["足球"],"relation":{"hasSelf":false,"hasMyFan":true,"hasMyFocus":true,"hasRelation":true,"hasFriend":true,"reqUserId":"1115551084476239872","hasMyStranger":false},"status":2,"userLabels":["系统工程师","系统人","卡西欧玩家"],"exts":"系统工程师、系统人、卡西欧玩家","hobbies":["vdndk","爱美食","看小说","听音乐"],"sex":1,"writers":["金庸"],"finalShowTags":[" [{\"About\":[{Systemer,Thinker:\"Product.System\",Programmer:\"C•Java•...•AiEngieering\",Designer:\"GUI•UI•4D•Motion\",}] }] .   \nI am a systemer（SYS），我是一个系统人，大家可以叫我，SYS。致力于系统工程、系统科学的研究与开发，锻造艺术品级别的系统。"],"name":"任小庆","userType":1,"userEduItem":{"userId":"1115551084476239872","major":"旅游管理、软件工程","schoolAddress":"河南","code":"18051","eduStartDate":"2005-01-01 00:00:00","college":"文化产业与旅游管理学院","schoolName":"河南大学","eduLevelType":5,"userEduItemId":"1168477421888999424"},"statusTag":"工作中","avatar":"https:\/\/cdn2.dnaerapp.com\/2020\/03\/20\/19\/2755D581-0F81-4E25-B5AA-811BA67D90C5.jpg","natures":["热血少年"],"dId":"000000","remarks":" [{\"About\":[{Systemer,Thinker:\"Product.System\",Programmer:\"C•Java•...•AiEngieering\",Designer:\"GUI•UI•4D•Motion\",}] }] .   \nI am a systemer（SYS），我是一个系统人，大家可以叫我，SYS。致力于系统工程、系统科学的研究与开发，锻造艺术品级别的系统。","userId":"1115551084476239872"}}],"item":"2"},{"type":"1","id":"1346298725880750080","factor":"24","feedExts":[{"contentId":"1346298725880750080","content":{"secends":87037,"userId":"1215169091313209344","allowShare":true,"source":[{"width":440,"sourceType":1,"height":320,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/05\/11\/FF744F49-D5BE-4665-A72C-8978B8331A81.JPG","duration":0},{"width":512,"sourceType":3,"height":2214,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/05\/11\/2B0556C2-CFB6-40E9-8C50-FA10DFEF6034.JPG","duration":0},{"width":512,"sourceType":1,"height":1635,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/05\/11\/D194B7E1-7814-400F-84BD-BFC66FFB65E6.JPG","duration":0}],"systemStatus":true,"scopeType":1,"publishSecends":87037,"type":2,"systemCreateTime":"2021-01-05 11:33:23","browses":669,"favours":25,"contentHotwordBeanList":[{"contentHotwordId":"1283938527380217856","word":"日剧"}],"contentId":"1346298725880750080","comments":3,"checkStatus":1,"imageShowType":2,"allowComment":true,"forwards":0,"saveNative":false,"allowDownload":true,"content":"日剧推荐⚠️《死役所》\n这部剧讲述人死后，何去何从，是地狱天堂，还是黄泉路。目前看完第一集，观感尚佳。第一集的主角是个14岁少年，在母亲再婚与继父不和，在学校受到霸凌的双重影响下，以自杀的方式结束生命，而后来到死役所。在这里与综合接待市村一起办理手续的过程中，逐渐了解到自己不知道的内幕~目测是单元剧，一集一个故事，剧集时长30分钟左右，短小精致。PS：最后选择去向，开门的地方设计的挺有意思，是上天堂还是下地狱？自有公断，大家都是公平的。这里的剧情设计有《死亡台球》的既视感。《死亡台球》同样也是探讨死后灵魂去向的故事，个人对这类题材非常喜欢，有时候等待正义到来反而容易让希望落空，不如直接让那些恶人下地狱永不超生来的痛快。"},"exts":"同城动态:推荐","hasCollect":false,"hasDislike":false,"source":"19","hasLike":false,"coins":0,"integral":62,"likes":[{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/7\/16\/16\/c22309cb6b1b13cdb75931793d0fc2a1159488945005515584.jpg","userId":"1283676900905308160"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/12\/23\/10\/072b74108b428ca426f90b7b7f0b595d160868899972266894.jpg","userId":"1341549497617920000"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/12\/18\/13\/1abb2dc3d76311944ffdbe9980fbaadd160826969786563528.jpg","userId":"1339758103483551744"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/1\/10\/13\/f9cc251d4fceec0849f5a089b3607523.JPG","userId":"1215442064498626560"}],"user":{"status":2,"userLabels":["电视剧中毒者"],"sex":2,"exts":"电视剧中毒者","userType":2,"hobbies":["电视剧","动漫"],"statusTag":"追剧中","avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/1\/9\/15\/b262c1573b1399c03e7a443c4ed6d4a6.JPG","userId":"1215169091313209344","dId":"106233","finalShowName":"雪子❄️","nickName":"雪子❄️","relation":{"hasSelf":false,"hasMyFan":false,"hasMyFocus":true,"hasRelation":true,"hasFriend":false,"reqUserId":"1215169091313209344","hasMyStranger":false},"userEduItem":{"userId":"1215169091313209344","schoolAddress":"黑龙江","code":"3008","eduStartDate":"2012-09-01 00:00:00","college":"环境设计","schoolName":"黑龙江科技大学","eduLevelType":5,"userEduItemId":"1264236907039166464"},"remarks":"日常安利，快来关注我呀","name":"梁莹莹","finalShowTags":["黑龙江科技大学","环境设计"]}}],"item":"2"},{"type":"1","id":"1345927846680297472","factor":"24","feedExts":[{"contentId":"1345927846680297472","content":{"secends":175461,"userId":"1215442059654205440","allowShare":true,"source":[{"width":3268,"sourceType":1,"height":2261,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/04\/10\/C93BD3B1-3335-4B52-8EC1-E0224CBD717B.JPG","duration":0},{"width":3268,"sourceType":1,"height":2295,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/04\/10\/F5E7825A-C8CC-4465-A739-A5446FA2C9FE.JPG","duration":0}],"systemStatus":true,"scopeType":1,"publishSecends":175461,"type":2,"systemCreateTime":"2021-01-04 10:59:39","browses":1514,"favours":32,"contentHotwordBeanList":[{"contentHotwordId":"1254349403762855936","word":"自拍"}],"contentId":"1345927846680297472","comments":7,"checkStatus":1,"imageShowType":2,"allowComment":true,"forwards":1,"saveNative":false,"allowDownload":true,"content":"2021年的第一张自拍🤳\n请大家忽略脏脏的镜子🪞😂😂😂"},"exts":"同城动态:推荐","hasCollect":false,"hasDislike":false,"source":"19","hasLike":false,"coins":0,"integral":88,"likes":[{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/12\/31\/12\/fd4d34b581254ccf94b3f76d5c8f2857-0.jpg","userId":"1344489967616434176"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/user\/wechart\/2021\/01\/05\/13\/pattern358756599435062958.png","userId":"1346332950097477632"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/user\/wechart\/2020\/10\/30\/1\/pattern2208016201140990454.png","userId":"1321873419478188032"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/user\/wechart\/2020\/10\/27\/14\/pattern4841332678091021597.png","userId":"1320980610480513024"}],"user":{"status":2,"userLabels":["声音好听"],"sex":2,"exts":"声音好听","userType":2,"hobbies":["听音乐","旅行","摄影","爱美食"],"statusTag":"睡觉中","avatar":"https:\/\/cdn2.dnaerapp.com\/2020\/09\/10\/11\/C8EB178A-CFD6-4147-97C7-6339E9CB7406.jpg","userId":"1215442059654205440","dId":"106452","finalShowName":"一颗橙子🍊","nickName":"一颗橙子🍊","relation":{"hasSelf":false,"hasMyFan":false,"hasMyFocus":true,"hasRelation":true,"hasFriend":false,"reqUserId":"1215442059654205440","hasMyStranger":false},"userEduItem":{"userId":"1215442059654205440","schoolAddress":"江苏","code":"8006","eduStartDate":"2015-09-01 00:00:00","schoolName":"南京航空航天大学","eduLevelType":5,"userEduItemId":"1215520697334501376"},"remarks":"区区世俗奈我何，我怡然自得。","name":"王橙橙","finalShowTags":["南京航空航天大学"]}}],"item":"2"},{"type":"1","id":"1345626315369947136","factor":"25","feedExts":[{"contentId":"1345626315369947136","content":{"secends":247352,"userId":"1291007156323196928","allowShare":true,"source":[{"width":1145,"sourceType":1,"height":1177,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/03\/15\/A2C1C348-0AC7-4056-AB59-3012541CD731.JPG","duration":0},{"width":4032,"sourceType":1,"height":3024,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/03\/15\/87CDE154-D6D5-4137-9113-03D2A334B4E1.JPG","duration":0},{"width":2700,"sourceType":1,"height":2700,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/03\/15\/BE3F7CD0-0154-4091-AA6F-EBDE9EC4E19F.JPG","duration":0},{"width":3024,"sourceType":1,"height":4032,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/03\/15\/F386BA31-2DA3-4E35-9867-C9DFAF43C086.JPG","duration":0},{"width":3024,"sourceType":1,"height":3024,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/03\/15\/B9D809D5-5188-48EA-AF1E-D970517C72DD.JPG","duration":0},{"width":1000,"sourceType":1,"height":2006,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/03\/15\/B51813AD-ECA6-4517-AA6D-70609C4D73D3.JPG","duration":0},{"width":3024,"sourceType":1,"height":3024,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/03\/15\/872FBD69-0D50-40A3-AD0F-6DE680389738.JPG","duration":0},{"width":3024,"sourceType":1,"height":3024,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/03\/15\/B975F0B1-2BFD-497D-AA5B-FA71D14EB1A5.JPG","duration":0},{"width":3024,"sourceType":1,"height":3024,"url":"https:\/\/cdn2.dnaerapp.com\/2021\/01\/03\/15\/CEEBB2AB-BC5D-4633-95B4-856218BF69A9.JPG","duration":0}],"systemStatus":true,"scopeType":1,"publishSecends":247352,"type":2,"systemCreateTime":"2021-01-03 15:01:28","browses":1830,"favours":36,"contentHotwordBeanList":[{"contentHotwordId":"1254349403762855936","word":"自拍"},{"contentHotwordId":"1255046831440793600","word":"美食"},{"contentHotwordId":"1275377981942534144","word":"今日打卡"}],"contentId":"1345626315369947136","comments":3,"checkStatus":1,"imageShowType":2,"allowComment":true,"forwards":0,"saveNative":false,"allowDownload":true,"content":"东野圭吾是这样比喻明知不可能的爱：就像故意去按发炎的智齿，从疼痛中获得莫名的快感。 "},"exts":"标签画像:推荐","hasCollect":false,"hasDislike":false,"source":"20","hasLike":false,"coins":0,"integral":84,"likes":[{"avatar":"https:\/\/cdn3.dnaerapp.com\/user\/wechart\/2021\/01\/05\/13\/pattern358756599435062958.png","userId":"1346332950097477632"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/12\/22\/10\/40c57f29dc7e4d387afe2f6a697f4680160860594508627233.jpg","userId":"1341211470227972096"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/2\/4\/11\/8258de3810472fa233b0b3793c1b8679.jpg","userId":"1224530797478940672"},{"avatar":"https:\/\/cdn2.dnaerapp.com\/2020\/08\/10\/17\/6412A46B-FA4F-4A16-BA84-738BDA4E6AFD.jpg","userId":"1215813954253754368"}],"user":{"status":2,"sex":2,"exts":"vb： kiki唐琪\n希望我的存在 能让你感到温暖^_^","hobbies":["看电影","电竞","听音乐"],"statusTag":"吃土中","avatar":"https:\/\/cdn2.dnaerapp.com\/2020\/12\/13\/02\/4D9EB57C-8481-44FD-971B-CD5F3ACD0EB7.jpg","userId":"1291007156323196928","dId":"227955","finalShowName":"唐琪","nickName":"kiki","relation":{"hasSelf":false,"hasMyFan":false,"hasMyFocus":false,"hasRelation":false,"hasFriend":false,"reqUserId":"1291007156323196928","hasMyStranger":false},"userEduItem":{"userId":"1291007156323196928","major":"播音主持专业","schoolAddress":"四川","code":"15715","eduStartDate":"2019-01-01 00:00:00","college":"播音主持学院","schoolName":"四川电影电视学院","eduLevelType":5,"userEduItemId":"1328498529291194368"},"remarks":"vb： kiki唐琪\n希望我的存在 能让你感到温暖^_^","name":"唐琪","finalShowTags":["四川电影电视学院","播音主持专业"]}}],"item":"2"},{"type":"1","id":"1343382025084477440","factor":"14","feedExts":[{"contentId":"1343382025084477440","content":{"secends":782432,"userId":"1263028922942099456","allowShare":true,"source":[{"width":690,"sourceType":1,"height":690,"url":"https:\/\/cdn2.dnaerapp.com\/2020\/12\/28\/10\/D32DEA2B-15A8-4AFF-87FC-657B5C73B348.JPG","duration":0},{"width":999,"sourceType":1,"height":999,"url":"https:\/\/cdn2.dnaerapp.com\/2020\/12\/28\/10\/078559D1-3864-4A35-B3EE-C4F35F9EFE26.JPG","duration":0},{"width":594,"sourceType":1,"height":597,"url":"https:\/\/cdn2.dnaerapp.com\/2020\/12\/28\/10\/7ECEDFE1-E24E-45A7-B705-5B5ADA6C2526.JPG","duration":0},{"width":597,"sourceType":1,"height":595,"url":"https:\/\/cdn2.dnaerapp.com\/2020\/12\/28\/10\/27B34290-4349-4816-8C64-C8703DC80977.JPG","duration":0}],"systemStatus":true,"scopeType":1,"publishSecends":782432,"type":2,"systemCreateTime":"2020-12-28 10:23:28","browses":1313,"favours":29,"contentId":"1343382025084477440","comments":1,"checkStatus":1,"imageShowType":2,"allowComment":true,"forwards":0,"saveNative":false,"allowDownload":true,"content":"可能会影响你生活的14个心理效应：\n\n1、野马效应\n\n吸血蝙蝠吸取野马的血为食，但所吸的血量极少，远不足以使野马死去，野马的死因是暴怒和狂奔。\n\n因芝麻小事而大动肝火，以致因别人的过失而伤害自己。很多时候，我们要想明白到底为了什么而生气和焦虑，不要因别人的过失而伤害自己。\n\n2、聚光灯效应\n\n有时我们总不经意地把自己的问题放到无限大，当我们出丑时总以为人家会注意到，其实人家或许当时会注意到，但事后马上就忘了。\n\n没有人会像你自己那样关注自己，‌‌“聚光灯效应‌‌”只存在于你的头脑中，而非真实情况的反映。试一试转移自己的注意力会更好。\n\n3、毛毛虫效应\n\n将毛毛虫们首尾相接，围一圈放在花盆边缘，花盆不远的地方撒一些松叶，毛毛虫夜以继日地绕着花盆转圈，最终因饥饿和精疲力尽相继死去。\n\n当我们的工作遭遇挫折或陷入停顿时，应努力寻求突破。不能只关注做了多少工作，还要关注做出多少成果，也就是‌‌“效益‌‌”。\n\n4、马太效应\n\n指强者愈强、弱者愈弱的现象。《新约.马太福音》：‌‌“凡有的还要加给他叫他多余；没有的连他所有的也要夺过来。‌‌”\n\n要保持在某个领域有不可替代的优势，就能够将大部分有利的资源聚拢在你的身边。\n\n5、飞轮效应\n\n为使静止的飞轮转动起来，一开始你必须使很大的力气，飞轮转得越来越快，达到某一临近点后，你无需再费更大的力气，飞轮依旧会快速转动，而且不停地转动。\n\n有时候你可能觉得做一件事很困难，但再坚持一下，过了临界点，就会变得轻松。\n\n6、酸萄萄效应\n\n寓言中狐狸得不到葡萄就说它酸，以平衡自己的心理。人们拿自己能够接受的‌‌“理由‌‌”来自我安慰，以避免心理上受到更重的伤害。\n\n心理防卫功能的确能够帮助我们，更好地适应生活；然而，沉溺其间却对生活有明显的副作用。\n\n7、凡勃伦效应\n\n美国经济学家凡勃伦注意到商品价格定得越高，越能受到消费者的青睐。商品价格越高消费者反而越愿意购买的消费倾向。\n\n人也是一样的，要想得到‌‌“好价钱‌‌”，就要把自己琢磨成器，放在对的地方待价而沽，职场如人生，都是如此。\n\n8、糖果效应\n\n心理学家测试一群4岁的孩子能否坚持在20 分钟后吃糖，经12 年追踪，不同表现的孩子长大后个性表现不同。试验通过孩子小时候表现出的自控、判断、自信，来预测其长大后的个性。\n\n要善于抵制诱惑，不被眼前利益所迷惑；别指望自控力会随着年岁的增大而自动增强，我们需要有意识的去锻炼。\n\n9、南风效应\n\n也叫‌‌“温暖‌‌”法则，源于一则法国寓言：北风和南风比威力，看谁可以把行人身上的大衣脱掉。北风刮得寒冷刺骨，行人把大衣裹得更紧。南风徐徐吹动，行人越来越热，继而脱掉大衣。\n\n在处理人与人之间的关系时，‌‌“温暖胜于严寒‌‌”，要特别注意讲究方法，平心静气地好好谈谈，往往能化干戈为玉帛。\n\n10、三明治效应\n\n批评心理学中，把批评的内容夹在两个表扬之中，会使受批评者偷快地接受批评。\n\n在建议和批评的同时，不忘认同、赏识、肯定、关爱对方，可以使接受批评者积极地接受批评，并改正自己的不足方面。\n\n11、曝光效应\n\n对人际交往吸引力的研究发现，我们会偏好自己熟悉的事物，见到某个人的次数越多，就越觉得此人招人喜爱、令人愉快。\n\n若想增强人际吸引，就要留心提高自己在别人面前的熟悉度，在某人面前混个脸熟会赢得好感。\n\n12、破窗效应\n\n一个房子如果窗户破了，没有人去修补，隔不久，其它的窗户也可能莫名其妙地被人打破。环境可以对一个人产生强烈的暗示性和诱导性。\n\n在工作中，时时刻刻都要保持警戒，别让自己成为职场上那扇任人践踏的破窗户。\n\n13、登门槛效应\n\n要让他人接受很难的要求时，最好先让他接受一个小一点的要求，这样他就比较容易接受更高的要求。这种心理现象叫做‌‌“登门槛效应‌‌”。\n\n跟别人提要求时，不要开始就提过高的要求，应先提小要求，再通过鼓励，逐步向其提出更高的要求。\n\n不过，还要注意看住自己的‌‌“门槛‌‌”，该拒绝的时候一定要拒绝。\n\n14、鸟笼效应\n\n如果一个人的客厅有了一个空鸟笼，过一段时间，他很可能会买只鸟回来养。\n\n人们会在偶然获得一件原本不需要的物品的基础上，自觉不自觉地添加更多自己不需要的东西。"},"exts":"校友内容:推荐","hasCollect":false,"hasDislike":false,"source":"15","hasLike":false,"coins":0,"integral":66,"likes":[{"avatar":"https:\/\/cdn3.dnaerapp.com\/wx\/pattern8163110870614220142.png","userId":"1230375207106121728"},{"avatar":"https:\/\/cdn2.dnaerapp.com\/2020\/09\/28\/10\/C3C525F5-8880-466F-B9AC-A07DDB052F3B.jpg","userId":"1310402638302240768"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/11\/16\/08\/6225c5d2f0e2468e8b44eef2fc732091-0.jpg","userId":"1116643941496786944"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/7\/22\/11\/e136e7156758ad4d581c5b214a5332f7159538885318286174.jpg","userId":"1285778408351137792"}],"user":{"status":2,"userLabels":["开朗，活泼，话痨"],"sex":1,"exts":"开朗，活泼，话痨","userType":2,"hobbies":["甜品，游戏"],"statusTag":"逛街","avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/5\/22\/16\/dcaf5e3f2d11506de448c06ec79e905e.png","userId":"1263028922942099456","dId":"166015","finalShowName":"张程宇","nickName":"张程宇","relation":{"hasSelf":false,"hasMyFan":false,"hasMyFocus":true,"hasRelation":true,"hasFriend":false,"reqUserId":"1263028922942099456","hasMyStranger":false},"userEduItem":{"userId":"1263028922942099456","code":"18003","eduStartDate":"2019-09-01 00:00:00","college":"资源与环境学院","schoolName":"河南农业大学","eduLevelType":5,"userEduItemId":"1263063813712908288"},"remarks":"也许世界上也有五千朵和你一模一样的花，但只有你是我独一无二的玫瑰。","name":"张程宇","finalShowTags":["河南农业大学","资源与环境学院"]}}],"item":"2"},{"type":"1","id":"1306980047628349440","factor":"14","feedExts":[{"contentId":"1306980047628349440","content":{"userId":"1306972825468936192","location":"[0.0, 0.0]","allowShare":true,"source":[{"width":600,"height":800,"url":"https:\/\/cdn1.dnaerapp.com\/2020\/09\/18\/23\/61ba77538603441eb8518946d0c3662a-0.jpg","duration":0}],"systemStatus":true,"scopeType":1,"latitude":0,"publishSecends":9461340,"type":2,"systemCreateTime":"2020-09-18 23:35:00","browses":1519,"longitude":0,"favours":21,"distance":12979800,"contentId":"1306980047628349440","comments":1,"checkStatus":1,"imageShowType":2,"allowComment":true,"forwards":0,"saveNative":false,"allowDownload":true,"secends":9461340},"exts":"校友内容:推荐","hasCollect":false,"hasDislike":false,"source":"15","hasLike":false,"coins":0,"integral":50,"likes":[{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/7\/20\/10\/cf2498cad26e2bf72194e77b2d302ab6159521376414361349.jpg","userId":"1285043103577047040"},{"avatar":"https:\/\/cdn2.dnaerapp.com\/2020\/07\/30\/10\/FE428E56-A742-4EBA-BE98-097367D5D549.jpg","userId":"1263034271782801408"},{"avatar":"https:\/\/cdn3.dnaerapp.com\/2020\/7\/23\/17\/d3082c4fcf56efc385c5420a418a5040159549728704854642.jpg","userId":"1263779066218156032"},{"avatar":"https:\/\/cdn1.dnaerapp.com\/2020\/08\/07\/17\/546886e52e8d46ffb5e99b261c0b436f-0.jpg","userId":"1215813965838422016"}],"user":{"status":2,"sex":1,"exts":"来自系统推荐！","avatar":"https:\/\/cdn3.dnaerapp.com\/dnaer\/icon\/dnaerman.jpg","userId":"1306972825468936192","dId":"232887","finalShowName":"严浩东","nickName":"王者霸道","relation":{"hasSelf":false,"hasMyFan":false,"hasMyFocus":false,"hasRelation":false,"hasFriend":false,"reqUserId":"1306972825468936192","hasMyStranger":false},"userEduItem":{"userId":"1306972825468936192","major":"农学","schoolAddress":"河南","code":"18003","eduStartDate":"2016-01-01 00:00:00","college":"农学院","schoolName":"河南农业大学","eduLevelType":5,"userEduItemId":"1306973965526900736"},"name":"严浩东","finalShowTags":["河南农业大学","农学"]}}],"item":"2"}],"code":200}